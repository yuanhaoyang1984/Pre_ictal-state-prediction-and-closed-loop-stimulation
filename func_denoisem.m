function [SIG1,sigDEN] = func_denoisem(SIG0)
% FUNC_DENOISE_DW1D Saved Denoising Process.
%   SIG: vector of data
%   -------------------
%   SIG1:各低频重构信号
%   sigDEN: vector of denoised data

%  Auto-generated by Wavelet Toolbox on 17-Sep-2015 10:38:27

% Analysis parameters.
%---------------------

%%
% 测试信号
% Fs=2000;       
% nfft = 8000;  
% %产生含有噪声的序列
% n=0:nfft;
% % xn=synchan(:,1);
% SIG0=cos(2*pi*0.05*nfft)+3*cos(2*pi*0.1*nfft)+(2*randn(size(nfft)));
wavelet='db45';
[C,L]=wavedec(SIG0,12,wavelet);
a12=appcoef(C,L,wavelet,12);
d12=detcoef(C,L,12);
d11=detcoef(C,L,11);
d10=detcoef(C,L,10);
d9=detcoef(C,L,9);
d8=detcoef(C,L,8);
d7=detcoef(C,L,7);
d6=detcoef(C,L,6);
d5=detcoef(C,L,5);
d4=detcoef(C,L,4);
d3=detcoef(C,L,3);
d2=detcoef(C,L,2);
d1=detcoef(C,L,1);
%设定阈值，
% thr10=thselect(d10,'sqtwolog');
% softd10=wthresh(d10,'s',thr10)';
softa12=zeros(length(a12),1);
softd12=d12';

% thr12=thselect(d12,'rigrsure');
% softd12=wthresh(d12,'s',thr12)';
softd11=d11';
softd10=d10';
thr9=thselect(d9,'rigrsure');
softd9=wthresh(d9,'s',thr9)';

thr8=thselect(d8,'heursure');
softd8=wthresh(d8,'s',thr8)';


thr7=thselect(d7,'heursure');
softd7=wthresh(d7,'s',thr7)';

thr6=thselect(d6,'sqtwolog');
softd6=wthresh(d6,'s',thr6)';

thr5=thselect(d5,'sqtwolog');
softd5=wthresh(d5,'s',thr5)';
thr4=thselect(d4,'sqtwolog');
softd4=wthresh(d4,'s',thr4)';


softd3=zeros(length(d3),1);
softd2=zeros(length(d2),1);
softd1=zeros(length(d1),1);



Cnew=[softa12;softd12;softd11;softd10;softd9; softd8; softd7; softd6; softd5; softd4; softd3; softd2; softd1];
sigDEN=waverec(Cnew,L,wavelet);


%重构0-4,4-8,8-16.16-32,32-64Hz的信号

% C=[a9;d9;d8;d7;d6;d5;d4;d3;d2;d1];
A8=wrcoef('a',Cnew,L,wavelet,8);


D8=wrcoef('d',Cnew,L,wavelet,8);
D7=wrcoef('d',Cnew,L,wavelet,7);
D6=wrcoef('d',Cnew,L,wavelet,6);
D5=wrcoef('d',Cnew,L,wavelet,5);

sig0=A8;
sig1=D8;
sig2=D7;
sig3=D6;
sig4=D5;

SIG1=[sig0 sig1 sig2 sig3 sig4 ];



end
%% 
% x = randn(1,1000);
% 
% % Find threshold for each selection rule. 
% % Adaptive threshold using SURE. 
% thr1 = thselect(x,'rigrsure');
% % Fixed form threshold. 
% thr2 = thselect(x,'sqtwolog');
% % Heuristic variant of the first option. 
% thr3 = thselect(x,'heursure');
% % Minimax threshold. 
% thr4 = thselect(x,'minimaxi');

%%
%%test
% sig=dd(:,3);
% fs=2000;NFFT=2048;
% N=length(sig)/10;
% nt=0:N-1;
% f=(nt/N)*fs;
% 
% fx1=fft(sig,N);mx1=abs(fx1);
% figure(1)
% plot(f,mx1);title('幅度响应s');
% axis([ 0 10 min(mx1) max(mx1)]);
% 
% window=hamming(1000);freqrange='onesided';
% noverlap=500; %数据无重叠
% [Pxx,f]=pwelch(sig,window,noverlap,NFFT,fs,freqrange);
% Px=10*log10(Pxx);

% figure(2)
% plot(f,Px);axis([0 20 0 max(Px)]);